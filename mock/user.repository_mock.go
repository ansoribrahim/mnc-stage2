// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mac/GolandProjects/mnc-stage2/src/repository/user.repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	data "mnc-stage2/src/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, userID string, lock bool) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID, lock)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, userID, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, userID, lock)
}

// GetUserByPhoneNumber mocks base method.
func (m *MockUserRepository) GetUserByPhoneNumber(ctx context.Context, userID string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneNumber", ctx, userID)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhoneNumber indicates an expected call of GetUserByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) GetUserByPhoneNumber(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).GetUserByPhoneNumber), ctx, userID)
}

// UpsertUser mocks base method.
func (m *MockUserRepository) UpsertUser(ctx context.Context, user *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUserRepositoryMockRecorder) UpsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserRepository)(nil).UpsertUser), ctx, user)
}
