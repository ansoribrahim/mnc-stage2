// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mac/GolandProjects/mnc-stage2/src/repository/transaction.repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	data "mnc-stage2/src/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetTransactionsByUserID mocks base method.
func (m *MockTransactionRepository) GetTransactionsByUserID(ctx context.Context, userID string) ([]data.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]data.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserID indicates an expected call of GetTransactionsByUserID.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserID", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionsByUserID), ctx, userID)
}

// InsertTransaction mocks base method.
func (m *MockTransactionRepository) InsertTransaction(ctx context.Context, transaction *data.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransactionRepositoryMockRecorder) InsertTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).InsertTransaction), ctx, transaction)
}
